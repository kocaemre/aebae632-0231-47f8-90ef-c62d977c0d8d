import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenAI } from '@google/genai';

// Gemini AI client'ƒ±nƒ± ba≈ülat
const ai = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY || ''
});

export async function POST(request: NextRequest) {
  try {
    // API key kontrol√º
    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json({
        success: false,
        message: 'Gemini AI API key tanƒ±mlanmamƒ±≈ü. L√ºtfen .env.local dosyasƒ±nda GEMINI_API_KEY deƒüi≈ükenini tanƒ±mlayƒ±n.'
      }, { status: 500 });
    }

    const body = await request.json();
    const { ilAdi, kategoriAdi, ilVerileri, secilenSektor, type, data } = body;

    // ƒ∞l kar≈üƒ±la≈ütƒ±rmasƒ± i√ßin farklƒ± i≈ülem
    if (type === 'il_karsilastirma') {
      return await handleIlKarsilastirma(data);
    }

    if (!ilAdi || !kategoriAdi || !ilVerileri) {
      return NextResponse.json({
        success: false,
        message: 'Gerekli parametreler eksik'
      }, { status: 400 });
    }

    // Kategori sayƒ±sƒ±nƒ± belirle
    const kategoriSayisi = Object.keys(ilVerileri.kategori_skorlari || {}).length;
    const isMergeMode = ilVerileri.is_merge_mode || kategoriSayisi > 1;
    
    // ƒ∞l verilerini analiz etmek i√ßin prompt hazƒ±rla
      const prompt = `
Sen bir yatƒ±rƒ±m analisti ve T√ºrkiye'deki illerin ekonomik potansiyelini deƒüerlendiren bir uzmansƒ±n.
A≈üaƒüƒ±daki verileri analiz ederek ${ilAdi} ili i√ßin ${isMergeMode ? 'se√ßilen kategoriler' : kategoriAdi} analizinde detaylƒ± bir yatƒ±rƒ±m raporu hazƒ±rla.

‚ö†Ô∏è KRƒ∞Tƒ∞K UYARI: 
1. A≈üaƒüƒ±daki verilerdeki t√ºm skorlar ger√ßek deƒüerlerdir
2. 0 olan skorlar ger√ßekten 0'dƒ±r, eksik veri deƒüildir
3. ASLA "eksik veri", "veri eksikliƒüi", "bulunmamasƒ±" gibi ifadeler kullanma
4. Sadece mevcut verilerle analiz yap, eksik olanlarƒ± g√∂rmezden gel
5. Pozitif ve yapƒ±cƒ± bir ton kullan
6. ASLA "Weighted Average Model", "Harmonik D√ºzeltme", "√áoklu Kategori Analizi projesi" gibi teknik terimler kullanma

ƒ∞l Bilgileri:
- ƒ∞l Adƒ±: ${ilAdi}
- Analiz T√ºr√º: ${isMergeMode ? '√áoklu Kategori Analizi' : 'Tek Kategori Analizi'}
- Sekt√∂r: ${secilenSektor === 'kamu' ? 'Kamu' : '√ñzel'}
- Y√ºz√∂l√ß√ºm√º: ${ilVerileri.yuzolcumu || 'Bilinmiyor'} km¬≤
- N√ºfus: ${ilVerileri.nufus || 'Bilinmiyor'}

${isMergeMode ? `
Se√ßilen Kategoriler ve Skorlarƒ±:
${Object.entries(ilVerileri.kategori_skorlari || {}).map(([kategori, skor]) => 
  `- ${kategori}: ${((Number(skor) || 0) * 100).toFixed(1)}%`
).join('\n')}

Kategori Aƒüƒ±rlƒ±klarƒ±:
${ilVerileri.kategoriAgirliklar ? Object.entries(ilVerileri.kategoriAgirliklar).map(([kategori, agirlik]) => 
  `- ${kategori}: ${((Number(agirlik) || 0) * 100).toFixed(1)}%`
).join('\n') : 'E≈üit aƒüƒ±rlƒ±k'}

Kategori Detaylarƒ±:
${ilVerileri.categoryScores ? Object.entries(ilVerileri.categoryScores).map(([kategoriId, scores]: [string, any]) => {
  // √áoklu kategori modunda kategori ismini category_scores'dan al
  const kategoriAdi = scores?.category_name || `Kategori ${kategoriId}`;
  return `
${kategoriAdi}:
  - Mevcut Durum: ${((scores?.current_status_score || 0) * 100).toFixed(1)}%
  - Trend: ${((scores?.trend_score || 0) * 100).toFixed(1)}%
  - √áekicilik: ${((scores?.attractiveness_score || 0) * 100).toFixed(1)}%
  - √ñncelik: ${((scores?.priority_score || 0) * 100).toFixed(1)}%
  - Aƒüƒ±rlƒ±k: ${((scores?.weight || 0) * 100).toFixed(1)}%`;
}).join('\n') : 'Detay verisi mevcut deƒüil'}
` : `
Tek Kategori Analizi - ${kategoriAdi}:
- Kategori Skoru: ${(ilVerileri.kategori_skorlari?.[kategoriAdi] * 100 || ilVerileri.genel_skor * 100 || 0).toFixed(1)}%

Kategori Performans Detaylarƒ±:
${ilVerileri.categoryPerformance && Array.isArray(ilVerileri.categoryPerformance) ? ilVerileri.categoryPerformance.map((cat: any) => 
  `- ${cat.category || kategoriAdi}:
    * √áekicilik Skoru: ${(Number(cat.attractivenessScore) || 0).toFixed(1)}%
    * √ñncelik Skoru: ${(Number(cat.priorityScore) || 0).toFixed(1)}%`
).join('\n') : 'Performans verisi mevcut deƒüil'}

Yatƒ±rƒ±m Skorlarƒ±:
${ilVerileri.investmentScores && Array.isArray(ilVerileri.investmentScores) ? ilVerileri.investmentScores.map((inv: any) => 
  `- ${inv.category || kategoriAdi}:
    * Mevcut Durum: ${(Number(inv.scores?.current_status) || 0).toFixed(1)}%
    * Trend: ${(Number(inv.scores?.trend) || 0).toFixed(1)}%
    * √áekicilik: ${(Number(inv.scores?.attractiveness) || 0).toFixed(1)}%
    * √ñncelik: ${(Number(inv.scores?.priority) || 0).toFixed(1)}%`
).join('\n') : 'Yatƒ±rƒ±m skoru verisi mevcut deƒüil'}

Yƒ±llƒ±k Trend Verileri:
${ilVerileri.yearlyTrend && Array.isArray(ilVerileri.yearlyTrend) ? ilVerileri.yearlyTrend.map((trend: any) => 
  `- ${trend.year}: ${(trend.score || 0).toFixed(1)}%`
).join('\n') : 'Trend verisi mevcut deƒüil'}
`}

Temel ƒ∞statistikler:
${ilVerileri.basicStats ? Object.entries(ilVerileri.basicStats).map(([key, value]) => 
  `- ${key}: ${value}`
).join('\n') : 'Veri mevcut deƒüil'}

Genel Skorlar:
${ilVerileri.compositeScores ? Object.entries(ilVerileri.compositeScores).map(([key, value]) => 
  `- ${key}: ${((Number(value) || 0) * 100).toFixed(1)}%`
).join('\n') : 'Veri mevcut deƒüil'}

${ilVerileri.avantajlar && Array.isArray(ilVerileri.avantajlar) ? `
Avantajlar:
${ilVerileri.avantajlar.map((av: string) => `- ${av || 'Bilinmeyen avantaj'}`).join('\n')}
` : ''}

${ilVerileri.projeler && Array.isArray(ilVerileri.projeler) ? `
Mevcut Projeler:
${ilVerileri.projeler.map((proje: any) => 
  `- ${proje?.ad || 'Bilinmeyen proje'}: ${proje?.durum || 'Bilinmeyen durum'} (B√ºt√ße: ${proje?.butce || 'Bilinmeyen'})`
).join('\n')}
` : ''}

L√ºtfen a≈üaƒüƒ±daki formatda detaylƒ± bir analiz raporu hazƒ±rla:

${isMergeMode ? `
## üìä ${ilAdi} ƒ∞li Se√ßilen Kategoriler Yatƒ±rƒ±m Analizi

### üéØ Genel Deƒüerlendirme
[ƒ∞lin genel durumu ve se√ßilen kategorilerdeki potansiyeli hakkƒ±nda 2-3 paragraf]

### üìà Kategori Bazƒ±nda G√º√ßl√º Y√∂nler
[Her kategori i√ßin avantajlarƒ± - kategori sayƒ±sƒ±na g√∂re 2-3 madde]

### üîÑ Kategori Arasƒ± Sinerji ve Etkile≈üim
[Kategoriler arasƒ±ndaki pozitif ve negatif etkile≈üimler - 3-4 madde]

### üöÄ Entegre Yatƒ±rƒ±m Fƒ±rsatlarƒ±
[Se√ßilen kategoriler yakla≈üƒ±mƒ±yla yatƒ±rƒ±m yapƒ±labilecek alanlar - 4-5 madde]

### üí° Stratejik √ñneriler
[${secilenSektor === 'kamu' ? 'Kamu' : '√ñzel'} sekt√∂r i√ßin se√ßilen kategoriler stratejisi - 4-5 madde]

### üéØ Sonu√ß ve Entegre Tavsiye
[Genel deƒüerlendirme ve se√ßilen kategoriler yatƒ±rƒ±m tavsiyesi]
` : `
## üìä ${ilAdi} ƒ∞li ${kategoriAdi} Kategorisi Yatƒ±rƒ±m Analizi

### üéØ Genel Deƒüerlendirme
[ƒ∞lin genel durumu ve ${kategoriAdi} potansiyeli hakkƒ±nda 2-3 paragraf]

### üìà G√º√ßl√º Y√∂nler
[ƒ∞lin ${kategoriAdi} kategorisindeki avantajlarƒ± - 3-4 madde]

### üöÄ Yatƒ±rƒ±m Fƒ±rsatlarƒ±
[${kategoriAdi} kategorisinde yatƒ±rƒ±m yapƒ±labilecek alanlar - 3-4 madde]

### üí° Stratejik √ñneriler
[${secilenSektor === 'kamu' ? 'Kamu' : '√ñzel'} sekt√∂r i√ßin ${kategoriAdi} √∂nerileri - 3-4 madde]

### üéØ Sonu√ß ve Tavsiye
[Genel deƒüerlendirme ve ${kategoriAdi} yatƒ±rƒ±m tavsiyesi]
`}

Raporu T√ºrk√ße olarak hazƒ±rla ve profesyonel bir ton kullan. Verileri objektif bir ≈üekilde analiz et ve somut √∂neriler sun. 

YASAK KELƒ∞MELER: "eksik", "bulunmamasƒ±", "mevcut deƒüil", "veri eksikliƒüi", "yetersiz", "sƒ±nƒ±rlƒ±", "Weighted Average Model", "Harmonik D√ºzeltme", "√áoklu Kategori Analizi projesi"
Bu kelimeleri ASLA kullanma! Sadece pozitif ve yapƒ±cƒ± yorumlar yap.

√ñNEMLƒ∞ UYARILAR:
- Sadece mevcut verilerle analiz yap
- Pozitif ve yapƒ±cƒ± yorumlar yap
- VERƒ∞LERƒ∞ Dƒ∞KKATLƒ∞ OKU: Performans skorlarƒ± 0-100 arasƒ±nda
- Eƒüer bir skor 0 ise, bu ger√ßekten 0 demektir
- ASLA teknik jargon veya alakasƒ±z terimler kullanma

${isMergeMode ? 'Se√ßilen kategoriler analizinde kategoriler arasƒ± etkile≈üimleri ve sinerjileri vurgula.' : 'Tek kategori analizinde o kategoriye odaklan ve derinlemesine analiz yap.'}
`;

      console.log('ü§ñ Gemini AI analizi ba≈ülatƒ±lƒ±yor...', { ilAdi, kategoriAdi });
  console.log('üìä ƒ∞l verileri yapƒ±sƒ±:', JSON.stringify(ilVerileri, null, 2));
  console.log('üîç CategoryPerformance detayƒ±:', JSON.stringify(ilVerileri.categoryPerformance, null, 2));
  console.log('üîç InvestmentScores detayƒ±:', JSON.stringify(ilVerileri.investmentScores, null, 2));
  
  // Veri yapƒ±sƒ±nƒ± kontrol et - SQL'den gelen veriler zaten mevcut
  console.log('üîç Mevcut veri alanlarƒ±:');
  console.log('- categoryPerformance:', !!ilVerileri.categoryPerformance);
  console.log('- investmentScores:', !!ilVerileri.investmentScores);
  console.log('- yearlyTrend:', !!ilVerileri.yearlyTrend);
  
  console.log('üîß D√ºzeltilmi≈ü veri yapƒ±sƒ±:', JSON.stringify(ilVerileri, null, 2));
  
  // AI'ye g√∂nderilecek prompt'u kontrol et
  console.log('üìù AI prompt baslangici:');
  console.log('Kategori Performans Detaylari:');
  console.log(ilVerileri.categoryPerformance && Array.isArray(ilVerileri.categoryPerformance) ? ilVerileri.categoryPerformance.map((cat: any) => 
    `- ${cat.categoryName || kategoriAdi}:
    * Performans Skoru: ${(Number(cat.performanceScore) || 0).toFixed(1)}%
    * Cekicilik Skoru: ${(Number(cat.attractivenessScore) || 0).toFixed(1)}%
    * Oncelik Skoru: ${(Number(cat.priorityScore) || 0).toFixed(1)}%`
  ).join('\n') : 'Performans verisi mevcut degil');

    // Gemini AI'dan analiz iste
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: prompt,
      config: {
        temperature: 0.7,
        maxOutputTokens: 2000,
      }
    });

    const analysisText = response.text;

    console.log('‚úÖ Gemini AI analizi tamamlandƒ±');

    return NextResponse.json({
      success: true,
      data: {
        ilAdi,
        kategoriAdi,
        sektor: secilenSektor,
        analiz: analysisText,
        olusturmaTarihi: new Date().toISOString(),
        model: 'gemini-2.0-flash'
      }
    });

  } catch (error) {
    console.error('‚ùå Gemini AI analiz hatasƒ±:', error);
    
    return NextResponse.json({
      success: false,
      message: 'AI analizi sƒ±rasƒ±nda hata olu≈ütu',
      error: error instanceof Error ? error.message : 'Bilinmeyen hata'
    }, { status: 500 });
  }
}

async function handleIlKarsilastirma(data: any) {
  try {
    const { il1, il2, kategori, farklar } = data;

    const kategoriAdlari: { [key: string]: string } = {
      'egitim': 'Eƒüitim',
      'saglik': 'Saƒülƒ±k',
      'sanayi': 'Sanayi',
      'tarim': 'Tarƒ±m ve Hayvancƒ±lƒ±k'
    };

    const kategoriAdi = kategoriAdlari[kategori] || kategori;

    const prompt = `
Sen bir yatƒ±rƒ±m analisti ve T√ºrkiye'deki illerin ekonomik potansiyelini deƒüerlendiren bir uzmansƒ±n.
A≈üaƒüƒ±daki verileri analiz ederek ${il1.ad} ve ${il2.ad} illeri arasƒ±nda ${kategoriAdi} kategorisinde detaylƒ± bir kar≈üƒ±la≈ütƒ±rma analizi hazƒ±rla.

‚ö†Ô∏è KRƒ∞Tƒ∞K UYARI: 
1. A≈üaƒüƒ±daki verilerdeki t√ºm deƒüerler ger√ßek deƒüerlerdir
2. 0 olan deƒüerler ger√ßekten 0'dƒ±r, eksik veri deƒüildir
3. ASLA "eksik veri", "veri eksikliƒüi", "bulunmamasƒ±" gibi ifadeler kullanma
4. Sadece mevcut verilerle analiz yap, eksik olanlarƒ± g√∂rmezden gel
5. Pozitif ve yapƒ±cƒ± bir ton kullan

Kar≈üƒ±la≈ütƒ±rma Verileri:

${il1.ad} ƒ∞li ${kategoriAdi} Verileri:
${Object.entries(il1.veriler).map(([key, veri]: [string, any]) => 
  `- ${key.replace(/_/g, ' ')}: ${veri.deger} ${veri.daha_iyi ? '(G√º√ßl√º)' : ''}`
).join('\n')}

${il2.ad} ƒ∞li ${kategoriAdi} Verileri:
${Object.entries(il2.veriler).map(([key, veri]: [string, any]) => 
  `- ${key.replace(/_/g, ' ')}: ${veri.deger} ${veri.daha_iyi ? '(G√º√ßl√º)' : ''}`
).join('\n')}

Detaylƒ± Fark Analizi:
${Object.entries(farklar).map(([key, fark]: [string, any]) => `
${key.replace(/_/g, ' ')}:
  - ${il1.ad}: ${fark.il1_deger}
  - ${il2.ad}: ${fark.il2_deger}
  - Fark: ${fark.fark > 0 ? '+' : ''}${fark.fark} (${fark.yuzde_fark > 0 ? '+' : ''}${fark.yuzde_fark.toFixed(1)}%)
  - Daha ƒ∞yi: ${fark.daha_iyi === 'il1' ? il1.ad : fark.daha_iyi === 'il2' ? il2.ad : 'E≈üit'}
`).join('\n')}

L√ºtfen a≈üaƒüƒ±daki formatda detaylƒ± bir kar≈üƒ±la≈ütƒ±rma analizi hazƒ±rla:

## üìä ${il1.ad} vs ${il2.ad} - ${kategoriAdi} Kar≈üƒ±la≈ütƒ±rmasƒ±

### üéØ Genel Deƒüerlendirme
[ƒ∞ki il arasƒ±ndaki genel durum ve ${kategoriAdi} kategorisindeki performans farklarƒ± hakkƒ±nda 2-3 paragraf]

### üìà G√º√ßl√º Y√∂nler Analizi
[Her iki ilin ${kategoriAdi} kategorisindeki g√º√ßl√º y√∂nleri - 3-4 madde]

### üîç Detaylƒ± Kar≈üƒ±la≈ütƒ±rma
[Her bir metrik i√ßin detaylƒ± kar≈üƒ±la≈ütƒ±rma - 4-5 madde]

### üöÄ Yatƒ±rƒ±m Fƒ±rsatlarƒ±
[Her iki il i√ßin ${kategoriAdi} kategorisinde yatƒ±rƒ±m fƒ±rsatlarƒ± - 3-4 madde]

### üí° Stratejik √ñneriler
[${kategoriAdi} kategorisinde hangi ilin daha avantajlƒ± olduƒüu ve neden - 4-5 madde]

### üéØ Sonu√ß ve Tavsiye
[Genel deƒüerlendirme ve hangi ilin ${kategoriAdi} kategorisinde daha iyi olduƒüu konusunda net tavsiye]

Raporu T√ºrk√ße olarak hazƒ±rla ve profesyonel bir ton kullan. Verileri objektif bir ≈üekilde analiz et ve somut √∂neriler sun.

YASAK KELƒ∞MELER: "eksik", "bulunmamasƒ±", "mevcut deƒüil", "veri eksikliƒüi", "yetersiz", "sƒ±nƒ±rlƒ±"
Bu kelimeleri ASLA kullanma! Sadece pozitif ve yapƒ±cƒ± yorumlar yap.

√ñNEMLƒ∞ UYARILAR:
- Sadece mevcut verilerle analiz yap
- Pozitif ve yapƒ±cƒ± yorumlar yap
- VERƒ∞LERƒ∞ Dƒ∞KKATLƒ∞ OKU: T√ºm deƒüerler ger√ßek verilerdir
- Eƒüer bir deƒüer 0 ise, bu ger√ßekten 0 demektir
- ƒ∞ki il arasƒ±nda objektif kar≈üƒ±la≈ütƒ±rma yap
`;

    console.log('ü§ñ Gemini AI il kar≈üƒ±la≈ütƒ±rmasƒ± ba≈ülatƒ±lƒ±yor...', { il1: il1.ad, il2: il2.ad, kategori });

    // Gemini AI'dan analiz iste
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: prompt,
      config: {
        temperature: 0.7,
        maxOutputTokens: 2000,
      }
    });

    const analysisText = response.text;

    console.log('‚úÖ Gemini AI il kar≈üƒ±la≈ütƒ±rmasƒ± tamamlandƒ±');

    return NextResponse.json({
      success: true,
      analysis: analysisText
    });

  } catch (error) {
    console.error('‚ùå Gemini AI il kar≈üƒ±la≈ütƒ±rmasƒ± hatasƒ±:', error);
    
    return NextResponse.json({
      success: false,
      message: 'AI analizi sƒ±rasƒ±nda hata olu≈ütu',
      error: error instanceof Error ? error.message : 'Bilinmeyen hata'
    }, { status: 500 });
  }
}
