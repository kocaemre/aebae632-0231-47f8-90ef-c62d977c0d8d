import { NextRequest, NextResponse } from 'next/server';
import { query } from '@/lib/database';
import { GoogleGenAI } from '@google/genai';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Kar≈üƒ±la≈ütƒ±rma API √ßaƒürƒ±sƒ± ba≈üladƒ±');
    
    const { il1_id, il2_id, kategori } = await request.json();
    console.log('üìù Gelen parametreler:', { il1_id, il2_id, kategori });

    if (!il1_id || !il2_id || !kategori) {
      return NextResponse.json({
        success: false,
        message: 'ƒ∞l ID\'leri ve kategori gerekli'
      }, { status: 400 });
    }

    // Her iki ilin verilerini direkt database'den al
    console.log('üîç ƒ∞l verileri √ßekiliyor:', { il1_id, il2_id, kategori });
    
    let il1Data, il2Data, il1Indicators, il2Indicators;
    
    try {
      [il1Data, il2Data, il1Indicators, il2Indicators] = await Promise.all([
        // Investment scores
        query(`
          SELECT 
            p.province_id as il_kodu,
            p.province_name as il_adi,
            s.category_id,
            s.current_status_score,
            s.trend_score,
            s.attractiveness_score,
            s.priority_score,
            (s.current_status_score + s.trend_score + s.attractiveness_score + s.priority_score) / 4 as ortalama_skor
          FROM provinces p
          LEFT JOIN investment_scores s ON p.province_id = s.province_id
          WHERE p.province_id = $1 
          AND s.year = (SELECT MAX(year) FROM investment_scores WHERE province_id = $1)
          AND s.category_id = $2
        `, [il1_id, kategori]),
        query(`
          SELECT 
            p.province_id as il_kodu,
            p.province_name as il_adi,
            s.category_id,
            s.current_status_score,
            s.trend_score,
            s.attractiveness_score,
            s.priority_score,
            (s.current_status_score + s.trend_score + s.attractiveness_score + s.priority_score) / 4 as ortalama_skor
          FROM provinces p
          LEFT JOIN investment_scores s ON p.province_id = s.province_id
          WHERE p.province_id = $1 
          AND s.year = (SELECT MAX(year) FROM investment_scores WHERE province_id = $1)
          AND s.category_id = $2
        `, [il2_id, kategori]),
        // Provincial data for il1
        query(`
          SELECT 
            pd.indicator_id,
            i.indicator_name,
            pd.value,
            i.unit
          FROM provincial_data pd
          JOIN indicators i ON pd.indicator_id = i.indicator_id
          WHERE pd.province_id = $1 
          AND i.category_id = $2
        `, [il1_id, kategori]),
        // Provincial data for il2
        query(`
          SELECT 
            pd.indicator_id,
            i.indicator_name,
            pd.value,
            i.unit
          FROM provincial_data pd
          JOIN indicators i ON pd.indicator_id = i.indicator_id
          WHERE pd.province_id = $1 
          AND i.category_id = $2
        `, [il2_id, kategori])
      ]);
      
      console.log('‚úÖ Database sorgularƒ± ba≈üarƒ±lƒ±:', { 
        il1_rows: il1Data.rows.length, 
        il2_rows: il2Data.rows.length,
        il1_indicators: il1Indicators.rows.length,
        il2_indicators: il2Indicators.rows.length
      });
      
    } catch (dbError) {
      console.error('‚ùå Database sorgu hatasƒ±:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Database baƒülantƒ± hatasƒ±',
        error: dbError instanceof Error ? dbError.message : 'Unknown database error'
      }, { status: 500 });
    }

    if (!il1Data.rows.length || !il2Data.rows.length) {
      console.error('‚ùå ƒ∞l verileri bulunamadƒ±:', { il1_rows: il1Data.rows.length, il2_rows: il2Data.rows.length });
      return NextResponse.json({
        success: false,
        message: 'ƒ∞l verileri bulunamadƒ±'
      }, { status: 404 });
    }

    // Investment scores'larƒ± hazƒ±rla
    const il1InvestmentScores = il1Data.rows[0] ? {
      current_status_score: il1Data.rows[0].current_status_score,
      trend_score: il1Data.rows[0].trend_score,
      attractiveness_score: il1Data.rows[0].attractiveness_score,
      priority_score: il1Data.rows[0].priority_score,
      ortalama_skor: il1Data.rows[0].ortalama_skor
    } : {};

    const il2InvestmentScores = il2Data.rows[0] ? {
      current_status_score: il2Data.rows[0].current_status_score,
      trend_score: il2Data.rows[0].trend_score,
      attractiveness_score: il2Data.rows[0].attractiveness_score,
      priority_score: il2Data.rows[0].priority_score,
      ortalama_skor: il2Data.rows[0].ortalama_skor
    } : {};

    // Indicator verilerini hazƒ±rla
    const il1IndicatorData = {};
    const il2IndicatorData = {};
    
    il1Indicators.rows.forEach(row => {
      il1IndicatorData[row.indicator_name] = {
        value: row.value,
        unit: row.unit
      };
    });
    
    il2Indicators.rows.forEach(row => {
      il2IndicatorData[row.indicator_name] = {
        value: row.value,
        unit: row.unit
      };
    });

    const il1 = {
      il_kodu: il1Data.rows[0]?.il_kodu,
      il_adi: il1Data.rows[0]?.il_adi,
      investment_scores: il1InvestmentScores,
      indicators: il1IndicatorData
    };
    
    const il2 = {
      il_kodu: il2Data.rows[0]?.il_kodu,
      il_adi: il2Data.rows[0]?.il_adi,
      investment_scores: il2InvestmentScores,
      indicators: il2IndicatorData
    };
    
    console.log('‚úÖ ƒ∞l verileri alƒ±ndƒ±:', { il1: il1.il_adi, il2: il2.il_adi });

    // Kategoriye g√∂re kar≈üƒ±la≈ütƒ±rma yap
    const farklar = calculateDifferences(il1, il2, kategori);
    
    // Genel sonu√ß olu≈ütur
    const genel_sonuc = generateGeneralResult(il1, il2, kategori, farklar);
    
    // AI analizi i√ßin veri hazƒ±rla
    const aiAnalizi = await generateAIAnalysisDirect(il1, il2, kategori, farklar);

    return NextResponse.json({
      success: true,
      data: {
        farklar,
        genel_sonuc,
        ai_analizi: aiAnalizi
      }
    });

  } catch (error) {
    console.error('‚ùå Kar≈üƒ±la≈ütƒ±rma hatasƒ±:', error);
    console.error('‚ùå Error details:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      name: error instanceof Error ? error.name : undefined
    });
    
    return NextResponse.json({
      success: false,
      message: 'Kar≈üƒ±la≈ütƒ±rma sƒ±rasƒ±nda hata olu≈ütu',
      error: process.env.NODE_ENV === 'development' ? 
        (error instanceof Error ? error.message : 'Unknown error') : 
        undefined
    }, { status: 500 });
  }
}

function calculateDifferences(il1: any, il2: any, kategori: string) {
  const farklar: { [key: string]: any } = {};

  // Investment scores kar≈üƒ±la≈ütƒ±rmasƒ±
  const investmentScoreFields = ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'];
  
  investmentScoreFields.forEach(alan => {
    const il1_deger = il1.investment_scores?.[alan] || 0;
    const il2_deger = il2.investment_scores?.[alan] || 0;
    const fark = il1_deger - il2_deger;
    const yuzde_fark = il2_deger !== 0 ? (fark / il2_deger) * 100 : 0;
    
    let daha_iyi: 'il1' | 'il2' | 'esit';
    if (Math.abs(fark) < 0.01) {
      daha_iyi = 'esit';
    } else if (fark > 0) {
      daha_iyi = 'il1';
    } else {
      daha_iyi = 'il2';
    }

    farklar[alan] = {
      il1_deger: il1_deger,
      il2_deger: il2_deger,
      fark: fark,
      yuzde_fark: yuzde_fark,
      daha_iyi: daha_iyi
    };
  });

  // Indicator verileri kar≈üƒ±la≈ütƒ±rmasƒ±
  const allIndicators = new Set([
    ...Object.keys(il1.indicators || {}),
    ...Object.keys(il2.indicators || {})
  ]);

  allIndicators.forEach(indicatorName => {
    const il1_deger = il1.indicators?.[indicatorName]?.value || 0;
    const il2_deger = il2.indicators?.[indicatorName]?.value || 0;
    const fark = il1_deger - il2_deger;
    const yuzde_fark = il2_deger !== 0 ? (fark / il2_deger) * 100 : 0;
    
    let daha_iyi: 'il1' | 'il2' | 'esit';
    if (Math.abs(fark) < 0.01) {
      daha_iyi = 'esit';
    } else if (fark > 0) {
      daha_iyi = 'il1';
    } else {
      daha_iyi = 'il2';
    }

    farklar[indicatorName] = {
      il1_deger: il1_deger,
      il2_deger: il2_deger,
      fark: fark,
      yuzde_fark: yuzde_fark,
      daha_iyi: daha_iyi,
      unit: il1.indicators?.[indicatorName]?.unit || il2.indicators?.[indicatorName]?.unit || ''
    };
  });

  return farklar;
}

function getKategoriAlanlari(kategori: string): string[] {
  // Kategori ID'sine g√∂re alanlarƒ± d√∂nd√ºr
  const kategoriAlanlari: { [key: string]: string[] } = {
    '1': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '2': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '3': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '4': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '5': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '6': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '7': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '8': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '9': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'],
    '10': ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor']
  };

  return kategoriAlanlari[kategori] || ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'];
}

function generateGeneralResult(il1: any, il2: any, kategori: string, farklar: any): string {
  const kategoriAdlari: { [key: string]: string } = {
    'egitim': 'Eƒüitim',
    'saglik': 'Saƒülƒ±k',
    'sanayi': 'Sanayi',
    'tarim': 'Tarƒ±m ve Hayvancƒ±lƒ±k'
  };

  const kategoriAdi = kategoriAdlari[kategori] || kategori;
  
  // Hangi ilin daha iyi olduƒüunu hesapla
  let il1Kazanma = 0;
  let il2Kazanma = 0;
  
  Object.values(farklar).forEach((fark: any) => {
    if (fark.daha_iyi === 'il1') il1Kazanma++;
    else if (fark.daha_iyi === 'il2') il2Kazanma++;
  });

  let genelSonuc = '';
  
  if (il1Kazanma > il2Kazanma) {
    genelSonuc = `${il1.il_adi}, ${kategoriAdi} kategorisinde ${il2.il_adi}'ye g√∂re daha g√º√ßl√º bir performans sergiliyor. ${il1Kazanma} alanda √∂nde olan ${il1.il_adi}, bu sekt√∂rde daha geli≈ümi≈ü bir altyapƒ±ya sahip.`;
  } else if (il2Kazanma > il1Kazanma) {
    genelSonuc = `${il2.il_adi}, ${kategoriAdi} kategorisinde ${il1.il_adi}'ye g√∂re daha g√º√ßl√º bir performans sergiliyor. ${il2Kazanma} alanda √∂nde olan ${il2.il_adi}, bu sekt√∂rde daha geli≈ümi≈ü bir altyapƒ±ya sahip.`;
  } else {
    genelSonuc = `${il1.il_adi} ve ${il2.il_adi} arasƒ±nda ${kategoriAdi} kategorisinde dengeli bir rekabet var. Her iki il de farklƒ± alanlarda g√º√ßl√º yanlar sergiliyor.`;
  }

  return genelSonuc;
}

async function generateAIAnalysisDirect(il1: any, il2: any, kategori: string, farklar: any): Promise<string> {
  // Multiple API keys for fallback
  const apiKeys = [
    process.env.GEMINI_API_KEY_1,
    process.env.GEMINI_API_KEY_2,
    process.env.GEMINI_API_KEY_3,
    process.env.GEMINI_API_KEY // Fallback to original
  ].filter(key => key && key.trim() !== '');

  if (apiKeys.length === 0) {
    console.error('‚ùå Hi√ßbir Gemini API key bulunamadƒ±');
    return 'AI servisi yapƒ±landƒ±rƒ±lmamƒ±≈ü. L√ºtfen daha sonra tekrar deneyin.';
  }

  // Try each API key until one works
  for (let i = 0; i < apiKeys.length; i++) {
    try {
      console.log(`ü§ñ Gemini AI key ${i + 1}/${apiKeys.length} deneniyor...`);
      
      // Gemini AI client'ƒ±nƒ± ba≈ülat
      const ai = new GoogleGenAI({
        apiKey: apiKeys[i] || ''
      });

    // Kategori ID'sini kategori adƒ±na √ßevir
    const kategoriAdlari: { [key: string]: string } = {
      '1': '√áevre ve Enerji',
      '2': 'Eƒüitim ve K√ºlt√ºr',
      '3': 'ƒ∞n≈üaat ve Konut',
      '4': 'ƒ∞stihdam ve ƒ∞≈üsizlik',
      '5': 'N√ºfus ve Demografi',
      '6': 'Saƒülƒ±k ve Sosyal Koruma',
      '7': 'Sanayi',
      '8': 'Tarƒ±m ve Hayvancƒ±lƒ±k',
      '9': 'Ula≈ütƒ±rma ve Haberle≈üme',
      '10': 'Ulusal Hesaplar',
      // String versiyonlarƒ± da
      'egitim': 'Eƒüitim ve K√ºlt√ºr',
      'saglik': 'Saƒülƒ±k ve Sosyal Koruma',
      'sanayi': 'Sanayi',
      'tarim': 'Tarƒ±m ve Hayvancƒ±lƒ±k'
    };

    const kategoriAdi = kategoriAdlari[kategori] || kategori;

    // Investment score indicator isimlerini al
    const indicatorIsimleri: { [key: string]: string } = {
      'current_status_score': 'Mevcut Durum Skoru',
      'trend_score': 'Trend Skoru',
      'attractiveness_score': '√áekicilik Skoru',
      'priority_score': '√ñncelik Skoru',
      'ortalama_skor': 'Ortalama Skor',
      // Eski indicator isimleri de (fallback i√ßin)
      'universite_sayisi': '√úniversite Sayƒ±sƒ±',
      'ogrenci_sayisi': '√ñƒürenci Sayƒ±sƒ±',
      'ogretmen_sayisi': '√ñƒüretmen Sayƒ±sƒ±',
      'okuryazarlik_orani': 'Okuryazarlƒ±k Oranƒ± (%)',
      'hastane_sayisi': 'Hastane Sayƒ±sƒ±',
      'doktor_sayisi': 'Doktor Sayƒ±sƒ±',
      'saglik_calisani_sayisi': 'Saƒülƒ±k √áalƒ±≈üanƒ± Sayƒ±sƒ±',
      'nufus': 'N√ºfus',
      'nufus_artis_hizi': 'N√ºfus Artƒ±≈ü Hƒ±zƒ± (%)',
      'genc_nufus_orani': 'Gen√ß N√ºfus Oranƒ± (%)',
      'fabrika_sayisi': 'Fabrika Sayƒ±sƒ±',
      'sanayi_ciro': 'Sanayi Ciro (TL)',
      'calisan_sayisi': '√áalƒ±≈üan Sayƒ±sƒ±',
      'tarim_alani': 'Tarƒ±m Alanƒ± (hektar)',
      'hayvan_sayisi': 'Hayvan Sayƒ±sƒ±',
      'tarim_uretim': 'Tarƒ±m √úretimi (ton)',
      'yol_uzunlugu': 'Yol Uzunluƒüu (km)',
      'arac_sayisi': 'Ara√ß Sayƒ±sƒ±',
      'ulasim_hizmeti': 'Ula≈üƒ±m Hizmeti Sayƒ±sƒ±',
      'gsyh': 'GSYH (TL)',
      'kisi_basi_gelir': 'Ki≈üi Ba≈üƒ± Gelir (TL)',
      'istihdam_orani': 'ƒ∞stihdam Oranƒ± (%)',
      'isizlik_orani': 'ƒ∞≈üsizlik Oranƒ± (%)'
    };

      const prompt = `
Sen bir yatƒ±rƒ±m analisti ve T√ºrkiye'deki illerin ekonomik potansiyelini deƒüerlendiren bir uzmansƒ±n.
A≈üaƒüƒ±daki verileri analiz ederek ${il1.il_adi} ve ${il2.il_adi} illeri arasƒ±nda ${kategoriAdi} kategorisinde detaylƒ± bir kar≈üƒ±la≈ütƒ±rma analizi hazƒ±rla.

‚ö†Ô∏è KRƒ∞Tƒ∞K UYARI: 
1. A≈üaƒüƒ±daki verilerdeki t√ºm deƒüerler ger√ßek deƒüerlerdir
2. 0 olan deƒüerler ger√ßekten 0'dƒ±r, eksik veri deƒüildir
3. ASLA "eksik veri", "veri eksikliƒüi", "bulunmamasƒ±" gibi ifadeler kullanma
4. Sadece mevcut verilerle analiz yap, eksik olanlarƒ± g√∂rmezden gel
5. Pozitif ve yapƒ±cƒ± bir ton kullan

üìä KULLANILAN METRƒ∞KLER VE ANLAMLARI:
- Mevcut Durum Skoru: ƒ∞lin ≈üu anki performans seviyesi (0-100 arasƒ±)
- Trend Skoru: ƒ∞lin gelecekteki potansiyeli ve b√ºy√ºme eƒüilimi (0-100 arasƒ±)
- √áekicilik Skoru: ƒ∞lin yatƒ±rƒ±m √ßekiciliƒüi ve cazibesi (0-100 arasƒ±)
- √ñncelik Skoru: ƒ∞lin yatƒ±rƒ±m √∂nceliƒüi ve aciliyeti (0-100 arasƒ±)
- Ortalama Skor: T√ºm metriklerin ortalamasƒ±, genel performans (0-100 arasƒ±)
Kar≈üƒ±la≈ütƒ±rma Verileri:

${il1.il_adi} ƒ∞li ${kategoriAdi} Investment Skorlarƒ±:
${Object.entries(il1.investment_scores || {}).map(([key, value]: [string, any]) => 
  `- ${indicatorIsimleri[key] || key.replace(/_/g, ' ')}: ${value}`
).join('\n')}

${il1.il_adi} ƒ∞li ${kategoriAdi} Indicator Verileri:
${Object.entries(il1.indicators || {}).map(([indicatorName, data]: [string, any]) => 
  `- ${indicatorName}: ${data.value} ${data.unit || ''}`
).join('\n')}

${il2.il_adi} ƒ∞li ${kategoriAdi} Investment Skorlarƒ±:
${Object.entries(il2.investment_scores || {}).map(([key, value]: [string, any]) => 
  `- ${indicatorIsimleri[key] || key.replace(/_/g, ' ')}: ${value}`
).join('\n')}

${il2.il_adi} ƒ∞li ${kategoriAdi} Indicator Verileri:
${Object.entries(il2.indicators || {}).map(([indicatorName, data]: [string, any]) => 
  `- ${indicatorName}: ${data.value} ${data.unit || ''}`
).join('\n')}

Detaylƒ± Fark Analizi:

Investment Skorlarƒ± Kar≈üƒ±la≈ütƒ±rmasƒ±:
${Object.entries(farklar).filter(([key]) => ['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'].includes(key)).map(([key, fark]: [string, any]) => `
${indicatorIsimleri[key] || key.replace(/_/g, ' ')}:
  - ${il1.il_adi}: ${fark.il1_deger}
  - ${il2.il_adi}: ${fark.il2_deger}
  - Fark: ${fark.fark > 0 ? '+' : ''}${fark.fark} (${fark.yuzde_fark > 0 ? '+' : ''}${fark.yuzde_fark.toFixed(1)}%)
  - Daha ƒ∞yi: ${fark.daha_iyi === 'il1' ? il1.il_adi : fark.daha_iyi === 'il2' ? il2.il_adi : 'E≈üit'}
`).join('\n')}

Indicator Verileri Kar≈üƒ±la≈ütƒ±rmasƒ±:
${Object.entries(farklar).filter(([key]) => !['current_status_score', 'trend_score', 'attractiveness_score', 'priority_score', 'ortalama_skor'].includes(key)).map(([key, fark]: [string, any]) => `
${key}:
  - ${il1.il_adi}: ${fark.il1_deger} ${fark.unit || ''}
  - ${il2.il_adi}: ${fark.il2_deger} ${fark.unit || ''}
  - Fark: ${fark.fark > 0 ? '+' : ''}${fark.fark} (${fark.yuzde_fark > 0 ? '+' : ''}${fark.yuzde_fark.toFixed(1)}%)
  - Daha ƒ∞yi: ${fark.daha_iyi === 'il1' ? il1.il_adi : fark.daha_iyi === 'il2' ? il2.il_adi : 'E≈üit'}
`).join('\n')}

L√ºtfen a≈üaƒüƒ±daki formatda detaylƒ± bir kar≈üƒ±la≈ütƒ±rma analizi hazƒ±rla:

## üìä ${il1.il_adi} vs ${il2.il_adi} - ${kategoriAdi} Kar≈üƒ±la≈ütƒ±rmasƒ±

### üéØ Genel Deƒüerlendirme
[ƒ∞ki il arasƒ±ndaki genel durum ve ${kategoriAdi} kategorisindeki performans farklarƒ± hakkƒ±nda 2-3 paragraf]

### üìà G√º√ßl√º Y√∂nler Analizi
[Her iki ilin ${kategoriAdi} kategorisindeki g√º√ßl√º y√∂nleri - 3-4 madde]

### üîç Detaylƒ± Kar≈üƒ±la≈ütƒ±rma
[Her bir metrik i√ßin detaylƒ± kar≈üƒ±la≈ütƒ±rma - 4-5 madde]

### üöÄ Yatƒ±rƒ±m Fƒ±rsatlarƒ±
[Her iki il i√ßin ${kategoriAdi} kategorisinde yatƒ±rƒ±m fƒ±rsatlarƒ± - 3-4 madde]

### üí° Stratejik √ñneriler
[${kategoriAdi} kategorisinde hangi ilin daha avantajlƒ± olduƒüu ve neden - 4-5 madde]

### üéØ Sonu√ß ve Tavsiye
[Genel deƒüerlendirme ve hangi ilin ${kategoriAdi} kategorisinde daha iyi olduƒüu konusunda net tavsiye]

Raporu T√ºrk√ße olarak hazƒ±rla ve profesyonel bir ton kullan. Verileri objektif bir ≈üekilde analiz et ve somut √∂neriler sun.

YASAK KELƒ∞MELER: "eksik", "bulunmamasƒ±", "mevcut deƒüil", "veri eksikliƒüi", "yetersiz", "sƒ±nƒ±rlƒ±"
Bu kelimeleri ASLA kullanma! Sadece pozitif ve yapƒ±cƒ± yorumlar yap.

√ñNEMLƒ∞ UYARILAR:
- Sadece mevcut verilerle analiz yap
- Pozitif ve yapƒ±cƒ± yorumlar yap
- VERƒ∞LERƒ∞ Dƒ∞KKATLƒ∞ OKU: T√ºm deƒüerler ger√ßek verilerdir
- Eƒüer bir deƒüer 0 ise, bu ger√ßekten 0 demektir
- ƒ∞ki il arasƒ±nda objektif kar≈üƒ±la≈ütƒ±rma yap

üìà ANALƒ∞Z TALƒ∞MATLARI:
- Her metriƒüi (Mevcut Durum Skoru, Trend Skoru, √áekicilik Skoru, √ñncelik Skoru, Ortalama Skor) ayrƒ± ayrƒ± analiz et
- Skor farklarƒ±nƒ± yorumla ve hangi ilin neden daha iyi olduƒüunu a√ßƒ±kla
- Y√ºksek skorlarƒ±n ne anlama geldiƒüini ve yatƒ±rƒ±m a√ßƒ±sƒ±ndan √∂nemini belirt
- D√º≈ü√ºk skorlarƒ±n bile pozitif y√∂nlerini bul ve geli≈üim fƒ±rsatlarƒ± olarak sun
- Her iki il i√ßin de somut yatƒ±rƒ±m √∂nerileri ver
- ${kategoriAdi} kategorisine √∂zel yatƒ±rƒ±m stratejileri √∂ner
`;

      console.log('ü§ñ Gemini AI il kar≈üƒ±la≈ütƒ±rmasƒ± ba≈ülatƒ±lƒ±yor...', { il1: il1.il_adi, il2: il2.il_adi, kategori, keyIndex: i + 1 });

      // Gemini AI'dan analiz iste
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash",
        contents: prompt,
        config: {
          temperature: 0.7,
          maxOutputTokens: 2000,
        }
      });

      const analysisText = response.text;

      console.log(`‚úÖ Gemini AI il kar≈üƒ±la≈ütƒ±rmasƒ± tamamlandƒ± (Key ${i + 1})`);

      return analysisText;

    } catch (error) {
      console.error(`‚ùå Gemini AI key ${i + 1} hatasƒ±:`, error);
      
      // Eƒüer son key ise, hata mesajƒ±nƒ± d√∂nd√ºr
      if (i === apiKeys.length - 1) {
        // Gemini AI overload hatasƒ±
        if (error instanceof Error && error.message.includes('overloaded')) {
          return 'T√ºm AI servisleri ≈üu anda a≈üƒ±rƒ± y√ºkl√º. L√ºtfen birka√ß dakika sonra tekrar deneyin.';
        }
        
        // Diƒüer hatalar
        return 'AI analizi ≈üu anda mevcut deƒüil. L√ºtfen daha sonra tekrar deneyin.';
      }
      
      // Ba≈üka key'ler varsa, bir sonrakini dene
      console.log(`üîÑ Key ${i + 1} ba≈üarƒ±sƒ±z, bir sonraki key deneniyor...`);
      continue;
    }
  }
  
  // Bu noktaya ula≈üƒ±rsa, t√ºm key'ler ba≈üarƒ±sƒ±z oldu
  return 'AI analizi ≈üu anda mevcut deƒüil. L√ºtfen daha sonra tekrar deneyin.';
}